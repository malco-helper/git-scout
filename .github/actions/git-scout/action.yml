name: 'Git Scout Analytics'
description: 'Analyze repository activity and post insights to PRs with smart defaults'
author: 'malcohelper'

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  github-token:
    description: 'GitHub token (auto-provided, only required when posting comments or using GitHub API)'
    required: false
    # Note: Cannot use default expressions in composite actions
  
  command:
    description: 'Git Scout command to run (e.g., "stats --since 7d")'
    required: false
    default: 'stats --since 7d'
  
  post-comment:
    description: 'Post results as PR comment (requires github-token)'
    required: false
    default: 'true'
  
  quality-gate:
    description: 'Enable quality gate checks'
    required: false
    default: 'false'
  
  quality-threshold:
    description: 'Minimum quality score (0-100)'
    required: false
    default: '70'
  
  fail-on-quality:
    description: 'Fail the action if quality gate fails'
    required: false
    default: 'false'

outputs:
  stats-json:
    description: 'JSON output of the analysis'
  
  quality-score:
    description: 'Overall quality score (0-100)'
  
  quality-passed:
    description: 'Whether quality gate passed (true/false)'

runs:
  using: 'composite'
  steps:
    - name: Validate Configuration
      shell: bash
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîç Git Scout Configuration Validation"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        POST_COMMENT="${{ inputs.post-comment }}"
        HAS_TOKEN="${{ inputs.github-token != '' }}"
        QUALITY_GATE="${{ inputs.quality-gate }}"
        IS_PR="${{ github.event_name == 'pull_request' }}"
        
        echo "üìã Configuration:"
        echo "  ‚Ä¢ Post Comment: $POST_COMMENT"
        echo "  ‚Ä¢ Has Token: $HAS_TOKEN"
        echo "  ‚Ä¢ Quality Gate: $QUALITY_GATE"
        echo "  ‚Ä¢ Event Type: ${{ github.event_name }}"
        echo ""
        
        # Validate token requirement
        if [ "$POST_COMMENT" == "true" ] && [ "$IS_PR" == "true" ] && [ "$HAS_TOKEN" == "false" ]; then
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚ùå Configuration Error"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "You enabled post-comment but no GitHub token was provided."
          echo ""
          echo "‚úÖ Fix Option 1: Add github-token to your workflow:"
          echo "  - uses: malcohelper/git-scout-action@v1"
          echo "    with:"
          echo "      github-token: \\\${{ secrets.GITHUB_TOKEN }}"
          echo ""
          echo "‚úÖ Fix Option 2: Disable PR comments:"
          echo "  - uses: malcohelper/git-scout-action@v1"
          echo "    with:"
          echo "      post-comment: false"
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          exit 1
        fi
        
        # Informational messages
        if [ "$HAS_TOKEN" == "false" ]; then
          echo "‚ÑπÔ∏è  Running in local-only mode (no GitHub API access)"
          echo "   ‚Ä¢ Analysis will run on local git history"
          echo "   ‚Ä¢ No PR comments will be posted"
          echo "   ‚Ä¢ Results will be available in logs only"
        else
          echo "‚úÖ Running with GitHub API access"
          if [ "$POST_COMMENT" == "true" ] && [ "$IS_PR" == "true" ]; then
            echo "   ‚Ä¢ Will post analysis to PR comments"
          fi
          if [ "$QUALITY_GATE" == "true" ]; then
            echo "   ‚Ä¢ Quality gate enabled (threshold: ${{ inputs.quality-threshold }})"
          fi
        fi
        
        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Git Scout
      shell: bash
      run: |
        echo "üì¶ Installing Git Scout..."
        npm install -g @malcohelper/git-scout 2>/dev/null || npm install -g git-scout || {
          echo "‚ùå Failed to install Git Scout"
          echo "Trying alternative installation methods..."
          npm install -g git-scout@latest
        }
        echo "‚úÖ Git Scout installed successfully"
        git-scout --version || echo "‚ö†Ô∏è  Warning: Could not verify Git Scout version"
    
    - name: Run Git Scout Analysis
      id: analysis
      shell: bash
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîç Running Analysis"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Command: git-scout ${{ inputs.command }} --json"
        echo ""
        
        # Run analysis and capture output
        if git-scout ${{ inputs.command }} --json > /tmp/git-scout-results.json 2>&1; then
          echo "‚úÖ Analysis completed successfully"
          
          if [ -f /tmp/git-scout-results.json ]; then
            echo "stats-json=$(cat /tmp/git-scout-results.json | jq -c . 2>/dev/null || cat /tmp/git-scout-results.json)" >> $GITHUB_OUTPUT
            echo ""
            echo "üìä Results Preview:"
            cat /tmp/git-scout-results.json | jq -C . 2>/dev/null || cat /tmp/git-scout-results.json | head -20
          fi
        else
          echo "‚ö†Ô∏è  Analysis completed with warnings"
          echo "Check logs above for details"
          # Don't fail - some commands might not produce JSON
          echo "stats-json={}" >> $GITHUB_OUTPUT
        fi
        
        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    - name: Calculate Quality Score
      id: quality
      shell: bash
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìä Quality Score Calculation"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # Calculate quality score based on stats
        # TODO: Implement real calculation based on metrics
        SCORE=75  # Default score
        
        if [ -f /tmp/git-scout-results.json ]; then
          # Try to calculate from actual data
          COMMITS=$(cat /tmp/git-scout-results.json | jq -r '.totalCommits // 0' 2>/dev/null || echo "0")
          FILES=$(cat /tmp/git-scout-results.json | jq -r '.totalFiles // 0' 2>/dev/null || echo "0")
          
          echo "Metrics:"
          echo "  ‚Ä¢ Commits: $COMMITS"
          echo "  ‚Ä¢ Files: $FILES"
          
          # Simple scoring logic (can be improved)
          if [ "$COMMITS" -gt "10" ]; then
            SCORE=85
          elif [ "$COMMITS" -gt "5" ]; then
            SCORE=75
          else
            SCORE=65
          fi
        fi
        
        echo ""
        echo "Quality Score: $SCORE/100"
        echo "quality-score=$SCORE" >> $GITHUB_OUTPUT
        
        THRESHOLD=${{ inputs.quality-threshold }}
        if [ "$SCORE" -ge "$THRESHOLD" ]; then
          echo "quality-passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Quality gate passed: $SCORE >= $THRESHOLD"
        else
          echo "quality-passed=false" >> $GITHUB_OUTPUT
          echo "‚ùå Quality gate failed: $SCORE < $THRESHOLD"
        fi
        
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    - name: Post PR Comment
      if: |
        inputs.post-comment == 'true' && 
        github.event_name == 'pull_request' && 
        inputs.github-token != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const statsFile = '/tmp/git-scout-results.json';
          
          console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
          console.log('üí¨ Posting PR Comment');
          console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
          
          if (!fs.existsSync(statsFile)) {
            console.log('‚ö†Ô∏è  No stats file found, creating default comment');
            return;
          }
          
          let stats = {};
          try {
            stats = JSON.parse(fs.readFileSync(statsFile, 'utf8'));
          } catch (error) {
            console.log('‚ö†Ô∏è  Could not parse stats file:', error.message);
            stats = {};
          }
          
          const qualityScore = '${{ steps.quality.outputs.quality-score }}';
          const qualityPassed = '${{ steps.quality.outputs.quality-passed }}';
          const qualityIcon = qualityPassed === 'true' ? '‚úÖ' : '‚ùå';
          
          const comment = `## üîç Git Scout Analysis

**Quality Score**: ${qualityScore}/100 ${qualityIcon}

### üìä Repository Statistics

| Metric | Value |
|--------|-------|
| Total Commits | ${stats.totalCommits || 0} |
| Files Changed | ${stats.totalFiles || 0} |
| Lines Added | +${stats.totalAdditions || 0} |
| Lines Removed | -${stats.totalDeletions || 0} |
| Active Authors | ${stats.activeAuthors || 0} |

### üë• Top Contributors

${stats.authorStats?.slice(0, 5).map(author => 
  `- **${author.name}**: ${author.commits} commits, ${author.filesChanged} files`
).join('\n') || '_No contributor data available_'}

${qualityPassed === 'false' ? `

### ‚ö†Ô∏è Quality Gate Status

Quality score (${qualityScore}) is below threshold (${{ inputs.quality-threshold }}).

**Recommendations:**
- Review recent changes
- Add more tests
- Improve code documentation
- Check for code smells

` : ''}

---

<sub>Generated by [Git Scout](https://github.com/malcohelper/git-scout) ‚Ä¢ [View Full Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})</sub>`;
          
          try {
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üîç Git Scout Analysis')
            );
            
            if (botComment) {
              console.log('üìù Updating existing comment');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              console.log('üìù Creating new comment');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
            console.log('‚úÖ Comment posted successfully');
          } catch (error) {
            console.log('‚ùå Failed to post comment:', error.message);
            core.setFailed(error.message);
          }
          
          console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
    - name: Check Quality Gate
      if: inputs.quality-gate == 'true' && steps.quality.outputs.quality-passed == 'false'
      shell: bash
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "‚ùå Quality Gate Failed"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""
        echo "Quality Score: ${{ steps.quality.outputs.quality-score }}/100"
        echo "Threshold: ${{ inputs.quality-threshold }}/100"
        echo ""
        
        if [ "${{ inputs.fail-on-quality }}" == "true" ]; then
          echo "üö´ Failing workflow as requested (fail-on-quality: true)"
          echo ""
          echo "To proceed anyway, either:"
          echo "  1. Improve code quality to meet threshold"
          echo "  2. Set fail-on-quality: false"
          echo "  3. Lower quality-threshold value"
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          exit 1
        else
          echo "‚ö†Ô∏è  Quality gate failed but not blocking workflow"
          echo "   (fail-on-quality is set to false)"
          echo ""
          echo "Consider setting fail-on-quality: true to enforce quality standards"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        fi
    
    - name: Summary
      if: always()
      shell: bash
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üìã Git Scout Action Summary"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""
        echo "Quality Score: ${{ steps.quality.outputs.quality-score }}/100"
        echo "Quality Passed: ${{ steps.quality.outputs.quality-passed }}"
        echo ""
        echo "üìñ Documentation: https://github.com/malcohelper/git-scout"
        echo "üêõ Issues: https://github.com/malcohelper/git-scout/issues"
        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
