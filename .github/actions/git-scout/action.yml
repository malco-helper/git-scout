name: "Git Scout Analytics"
description: "Analyze repository activity and send weekly reports to Slack"
author: "malcohelper"

branding:
  icon: "activity"
  color: "blue"

inputs:
  send-to-slack:
    description: "Send weekly report to Slack webhook"
    required: false
    default: "true"

  slack-webhook-url:
    description: "Slack webhook URL for sending reports"
    required: true

  slack-channel:
    description: "Slack channel to post to (optional, overrides webhook default)"
    required: false

  slack-username:
    description: "Bot username to display in Slack"
    required: false
    default: "Git Scout Bot"

  report-title:
    description: "Title for the weekly report"
    required: false
    default: "Weekly Analytics Report"

runs:
  using: "composite"
  steps:
    - name: Validate Configuration
      shell: bash
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔍 Git Scout Configuration Validation"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

        SEND_SLACK="${{ inputs.send-to-slack }}"
        HAS_WEBHOOK="${{ inputs.slack-webhook-url != '' }}"
        CHANNEL="${{ inputs.slack-channel }}"
        USERNAME="${{ inputs.slack-username }}"

        echo "📋 Configuration:"
        echo "  • Send to Slack: $SEND_SLACK"
        echo "  • Has Webhook: $HAS_WEBHOOK"
        echo "  • Channel: ${CHANNEL:-default}"
        echo "  • Username: $USERNAME"
        echo "  • Report Title: ${{ inputs.report-title }}"
        echo ""

        # Validate webhook requirement for Slack
        if [ "$SEND_SLACK" == "true" ] && [ "$HAS_WEBHOOK" == "false" ]; then
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ Configuration Error"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "You enabled send-to-slack but no webhook URL was provided."
          echo ""
          echo "✅ Fix: Add slack-webhook-url input with your Slack webhook"
          echo "   See: https://api.slack.com/messaging/webhooks"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1
        fi

        echo "✅ Configuration validated - ready to send report to Slack"
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "18"

    - name: Install Git Scout
      shell: bash
      run: |
        echo "📦 Installing Git Scout..."
        npm install -g @malcohelper/git-scout 2>/dev/null || npm install -g git-scout || {
          echo "❌ Failed to install Git Scout"
          echo "Trying alternative installation methods..."
          npm install -g git-scout@latest
        }
        echo "✅ Git Scout installed successfully"
        git-scout --version || echo "⚠️  Warning: Could not verify Git Scout version"

    - name: Run Git Scout Analysis
      id: analysis
      shell: bash
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔍 Running Analysis"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Command: git-scout stats --since 7d --json"
        echo ""

        # Run analysis and capture output
        # Redirect stdout to file, but keep stderr visible
        if git-scout stats --since 7d --json > /tmp/git-scout-results.json 2> /tmp/git-scout-errors.txt; then
          echo "✅ Analysis completed successfully"
          
          if [ -f /tmp/git-scout-results.json ]; then
            echo ""
            echo "📊 Results Preview:"
            cat /tmp/git-scout-results.json | jq -C . 2>/dev/null || cat /tmp/git-scout-results.json | head -20
          fi
        else
          EXIT_CODE=$?
          echo "❌ Analysis failed with exit code: $EXIT_CODE"
          echo ""
          
          # Show error output
          if [ -f /tmp/git-scout-errors.txt ] && [ -s /tmp/git-scout-errors.txt ]; then
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Error Output:"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            cat /tmp/git-scout-errors.txt
            echo ""
          fi
          
          # Show any partial output that was captured
          if [ -f /tmp/git-scout-results.json ] && [ -s /tmp/git-scout-results.json ]; then
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Partial Output:"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            cat /tmp/git-scout-results.json
            echo ""
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "💡 Troubleshooting Tips:"
          echo "  • Ensure you're running this in a Git repository"
          echo "  • Check if there are commits in the last 7 days"
          echo "  • Verify Git is properly configured in the runner"
          echo "  • Try running: git log --since=7d"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1
        fi

        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    - name: Send Report to Slack
      if: inputs.send-to-slack == 'true' && inputs.slack-webhook-url != ''
      shell: bash
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📤 Sending Report to Slack"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

        # Read stats file
        STATS_FILE="/tmp/git-scout-results.json"
        REPORT_TITLE="${{ inputs.report-title }}"
        REPO_NAME="${{ github.repository }}"
        WORKFLOW_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

        # Parse stats
        if [ -f "$STATS_FILE" ]; then
          COMMITS=$(jq -r '.totalCommits // 0' "$STATS_FILE" 2>/dev/null || echo "0")
          FILES=$(jq -r '.totalFiles // 0' "$STATS_FILE" 2>/dev/null || echo "0")
          AUTHORS=$(jq -r '.activeAuthors // 0' "$STATS_FILE" 2>/dev/null || echo "0")
          ADDITIONS=$(jq -r '.totalAdditions // 0' "$STATS_FILE" 2>/dev/null || echo "0")
          DELETIONS=$(jq -r '.totalDeletions // 0' "$STATS_FILE" 2>/dev/null || echo "0")
          
          # Get top contributors
          TOP_CONTRIBUTORS=$(jq -r '.authorStats[:3] | map("• *" + .name + "*: " + (.commits | tostring) + " commits") | join("\n")' "$STATS_FILE" 2>/dev/null || echo "No data available")
        else
          COMMITS="0"
          FILES="0"
          AUTHORS="0"
          ADDITIONS="0"
          DELETIONS="0"
          TOP_CONTRIBUTORS="No data available"
        fi

        # Build Slack message payload
        CHANNEL="${{ inputs.slack-channel }}"
        USERNAME="${{ inputs.slack-username }}"

        # Create summary text for fallback
        SUMMARY_TEXT="📊 ${REPORT_TITLE} for ${REPO_NAME} - Commits: ${COMMITS} | Files: ${FILES} | Contributors: ${AUTHORS} | Lines: +${ADDITIONS}/-${DELETIONS}"

        # Start building JSON
        cat > /tmp/slack-payload.json << EOF
        {
          "text": "${SUMMARY_TEXT}",
          "username": "${USERNAME}"$([ -n "$CHANNEL" ] && echo ",
          \"channel\": \"${CHANNEL}\""),
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "📊 ${REPORT_TITLE}",
                "emoji": true
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Repository:* ${REPO_NAME}\n*Date:* $(date '+%Y-%m-%d %H:%M UTC')"
              }
            },
            {
              "type": "divider"
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*📊 Key Metrics*"
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": "*Commits*\n${COMMITS}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Files Changed*\n${FILES}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Contributors*\n${AUTHORS}"
                },
                {
                  "type": "mrkdwn",
                  "text": "*Lines Changed*\n+${ADDITIONS} / -${DELETIONS}"
                }
              ]
            },
            {
              "type": "divider"
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*👥 Top Contributors*\n${TOP_CONTRIBUTORS}"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "<${WORKFLOW_URL}|View Full Report>"
              }
            }
          ]
        }
        EOF

        # Send to Slack
        HTTP_CODE=$(curl -s -o /tmp/slack-response.txt -w "%{http_code}" \
          -X POST \
          -H 'Content-type: application/json' \
          --data @/tmp/slack-payload.json \
          "${{ inputs.slack-webhook-url }}")

        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Report sent to Slack successfully"
        else
          echo "❌ Failed to send to Slack (HTTP $HTTP_CODE)"
          cat /tmp/slack-response.txt
          exit 1
        fi

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    - name: Summary
      if: always()
      shell: bash
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📋 Git Scout Action Summary"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "Report sent to Slack successfully ✅"
        echo ""
        echo "📖 Documentation: https://github.com/malcohelper/git-scout"
        echo "🐛 Issues: https://github.com/malcohelper/git-scout/issues"
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
